// Generated by @wagmi/cli@1.3.0 on 8/7/2023 at 4:19:10 PM
import {
  useContractRead,
  UseContractReadConfig,
  useNetwork,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DummyModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyModuleABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_vault', internalType: 'address', type: 'address' },
      { name: '_cadence', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cadence',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vault',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ModuleFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export const moduleFactoryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'vault',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ModuleDeployed',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_vault', internalType: 'address', type: 'address' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createModule',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'deployedModules',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export const moduleFactoryAddress = {
  10: '0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96',
  420: '0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96',
  31337: '0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96',
} as const

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export const moduleFactoryConfig = {
  address: moduleFactoryAddress,
  abi: moduleFactoryABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__.
 */
export function useDummyModuleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"cadence"`.
 */
export function useDummyModuleCadence<
  TFunctionName extends 'cadence',
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: 'cadence',
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"vault"`.
 */
export function useDummyModuleVault<
  TFunctionName extends 'vault',
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: 'vault',
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleFactoryABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export function useModuleFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof moduleFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof moduleFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: moduleFactoryABI,
    address: moduleFactoryAddress[chainId as keyof typeof moduleFactoryAddress],
    ...config,
  } as UseContractReadConfig<
    typeof moduleFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleFactoryABI}__ and `functionName` set to `"deployedModules"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export function useModuleFactoryDeployedModules<
  TFunctionName extends 'deployedModules',
  TSelectData = ReadContractResult<typeof moduleFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleFactoryABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof moduleFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: moduleFactoryABI,
    address: moduleFactoryAddress[chainId as keyof typeof moduleFactoryAddress],
    functionName: 'deployedModules',
    ...config,
  } as UseContractReadConfig<
    typeof moduleFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleFactoryABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export function useModuleFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof moduleFactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof moduleFactoryABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof moduleFactoryABI, TFunctionName, TMode>({
    abi: moduleFactoryABI,
    address: moduleFactoryAddress[chainId as keyof typeof moduleFactoryAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleFactoryABI}__ and `functionName` set to `"createModule"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export function useModuleFactoryCreateModule<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof moduleFactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleFactoryABI,
          'createModule'
        >['request']['abi'],
        'createModule',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'createModule'
      }
    : UseContractWriteConfig<typeof moduleFactoryABI, 'createModule', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createModule'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof moduleFactoryABI, 'createModule', TMode>({
    abi: moduleFactoryABI,
    address: moduleFactoryAddress[chainId as keyof typeof moduleFactoryAddress],
    functionName: 'createModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleFactoryABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export function usePrepareModuleFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleFactoryABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof moduleFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: moduleFactoryABI,
    address: moduleFactoryAddress[chainId as keyof typeof moduleFactoryAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleFactoryABI}__ and `functionName` set to `"createModule"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export function usePrepareModuleFactoryCreateModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleFactoryABI, 'createModule'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof moduleFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: moduleFactoryABI,
    address: moduleFactoryAddress[chainId as keyof typeof moduleFactoryAddress],
    functionName: 'createModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleFactoryABI, 'createModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleFactoryABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export function useModuleFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof moduleFactoryABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof moduleFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: moduleFactoryABI,
    address: moduleFactoryAddress[chainId as keyof typeof moduleFactoryAddress],
    ...config,
  } as UseContractEventConfig<typeof moduleFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleFactoryABI}__ and `eventName` set to `"ModuleDeployed"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x1144460C8D6D36b7eB2A16a7FFf2E84a294C2d96)
 * -
 */
export function useModuleFactoryModuleDeployedEvent(
  config: Omit<
    UseContractEventConfig<typeof moduleFactoryABI, 'ModuleDeployed'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof moduleFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: moduleFactoryABI,
    address: moduleFactoryAddress[chainId as keyof typeof moduleFactoryAddress],
    eventName: 'ModuleDeployed',
    ...config,
  } as UseContractEventConfig<typeof moduleFactoryABI, 'ModuleDeployed'>)
}
